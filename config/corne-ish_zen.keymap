/*
*
* Copyright (c) 2021 Darryl deHaan
* SPDX-License-Identifier: MIT
*
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#include <dt-bindings/zmk/hid_usage.h>
#include <dt-bindings/zmk/hid_usage_pages.h>
#include <dt-bindings/zmk/modifiers.h>

#define ES_ESCAPE_CHARACTER (LC(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_APOSTROPHE_AND_QUOTE)))
#define ES_FILE_SEPARATOR (LC(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_MINUS_AND_UNDERSCORE)))
#define ES_GROUP_SEPARATOR (LC(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_BACKSLASH_AND_PIPE)))
#define ES_SPACE (ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_SPACEBAR))
#define ES_EXCLAMATION (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_1_AND_EXCLAMATION)))
#define ES_EXCL (ES_EXCLAMATION)
#define ES_DOUBLE_QUOTES (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_2_AND_AT)))
#define ES_DQT (ES_DOUBLE_QUOTES)
#define ES_HASH (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_3_AND_HASH)))
#define ES_POUND (ES_HASH)
#define ES_DOLLAR (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_4_AND_DOLLAR)))
#define ES_DLLR (ES_DOLLAR)
#define ES_PERCENT (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_5_AND_PERCENT)))
#define ES_PRCNT (ES_PERCENT)
#define ES_AMPERSAND (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_6_AND_CARET)))
#define ES_AMPS (ES_AMPERSAND)
#define ES_SINGLE_QUOTE (ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_MINUS_AND_UNDERSCORE))
#define ES_SQT (ES_SINGLE_QUOTE)
#define ES_APOSTROPHE (ES_SINGLE_QUOTE)
#define ES_APOS (ES_SINGLE_QUOTE)
#define ES_LEFT_PARENTHESIS (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_8_AND_ASTERISK)))
#define ES_LPAR (ES_LEFT_PARENTHESIS)
#define ES_RIGHT_PARENTHESIS (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_9_AND_LEFT_PARENTHESIS)))
#define ES_RPAR (ES_RIGHT_PARENTHESIS)
#define ES_ASTERISK (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_RIGHT_BRACKET_AND_RIGHT_BRACE)))
#define ES_ASTRK (ES_ASTERISK)
#define ES_STAR (ES_ASTERISK)
#define ES_PLUS (ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_RIGHT_BRACKET_AND_RIGHT_BRACE))
#define ES_COMMA (ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_COMMA_AND_LESS_THAN))
#define ES_MINUS (ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_SLASH_AND_QUESTION_MARK))
#define ES_PERIOD (ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_PERIOD_AND_GREATER_THAN))
#define ES_DOT (ES_PERIOD)
#define ES_SLASH (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_7_AND_AMPERSAND)))
#define ES_FSLH (ES_SLASH)
#define ES_COLON (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_PERIOD_AND_GREATER_THAN)))
#define ES_SEMICOLON (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_COMMA_AND_LESS_THAN)))
#define ES_SEMI (ES_SEMICOLON)
#define ES_LESS_THAN (ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_NON_US_BACKSLASH_AND_PIPE))
#define ES_LT (ES_LESS_THAN)
#define ES_EQUAL (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_0_AND_RIGHT_PARENTHESIS)))
#define ES_GREATER_THAN (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_NON_US_BACKSLASH_AND_PIPE)))
#define ES_GT (ES_GREATER_THAN)
#define ES_QUESTION (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_MINUS_AND_UNDERSCORE)))
#define ES_QMARK (ES_QUESTION)
#define ES_AT_SIGN (RA(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_Q)))
#define ES_AT (ES_AT_SIGN)
#define ES_LEFT_BRACKET (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_APOSTROPHE_AND_QUOTE)))
#define ES_LBKT (ES_LEFT_BRACKET)
#define ES_BACKSLASH (RA(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_MINUS_AND_UNDERSCORE)))
#define ES_BSLH (ES_BACKSLASH)
#define ES_RIGHT_BRACKET (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_BACKSLASH_AND_PIPE)))
#define ES_RBKT (ES_RIGHT_BRACKET)
#define ES_CARET (RA(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_APOSTROPHE_AND_QUOTE)))
#define ES_UNDERSCORE (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_SLASH_AND_QUESTION_MARK)))
#define ES_UNDER (ES_UNDERSCORE)
#define ES_GRAVE (RA(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_BACKSLASH_AND_PIPE)))
#define ES_LEFT_BRACE (ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_APOSTROPHE_AND_QUOTE))
#define ES_LBRC (ES_LEFT_BRACE)
#define ES_PIPE (ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_GRAVE_ACCENT_AND_TILDE))
#define ES_RIGHT_BRACE (ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_BACKSLASH_AND_PIPE))
#define ES_RBRC (ES_RIGHT_BRACE)
#define ES_TILDE (RA(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_RIGHT_BRACKET_AND_RIGHT_BRACE)))
#define ES_INVERTED_EXCLAMATION (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_EQUAL_AND_PLUS)))
#define ES_IEXCL (ES_INVERTED_EXCLAMATION)
#define ES_UMLAUT (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_LEFT_BRACKET_AND_LEFT_BRACE)))
#define ES_NOT (RA(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_GRAVE_ACCENT_AND_TILDE)))
#define ES_DEGREE (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_GRAVE_ACCENT_AND_TILDE)))
#define ES_DEG (ES_DEGREE)
#define ES_ACUTE (ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_LEFT_BRACKET_AND_LEFT_BRACE))
#define ES_INVERTED_QUESTION (ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_EQUAL_AND_PLUS))
#define ES_IQMARK (ES_INVERTED_QUESTION)
#define ES_N_TILDE (ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_SEMICOLON_AND_COLON))

#define SYM_L 1
#define NUM_L 2
#define MED_L 3
#define NAV_L 4

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
&lt { quick_tap_ms = <200>; };

/ {

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow mods";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "COLEMK";
            bindings = <
                &none  &kp Q       &kp W        &kp F       &kp P        &kp G        &kp J    &kp L        &hm ES_UMLAUT U    &kp Y             &hm ES_N_TILDE ES_ACUTE  &none
                &none  &hm LGUI A  &hm LCTRL R  &hm LALT S  &hm LSHFT T  &kp D        &kp H    &hm LSHFT N  &hm LALT E         &hm LCTRL I       &hm LGUI O               &none
                &none  &kp Z       &kp X        &kp C       &kp V        &kp B        &kp K    &kp M        &hm ES_SEMI COMMA  &hm ES_COLON DOT  &hm ES_UNDER ES_MINUS    &none
                                        &none  &lt SYM_L BKSP  &lt NUM_L SPACE        &lt MED_L RET  &lt NAV_L DEL  &none
            >;
        };

        sym_layer {
            label = "SYMBOL";
            bindings = <
                &none  &kp ES_PIPE  &kp ES_AMPS   &kp ES_DLLR  &kp ES_HASH  &kp ES_IQMARK        &kp ES_QMARK  &kp ES_EQUAL  &kp ES_DQT    &kp ES_APOS   &kp ES_GRAVE  &none
                &none  &kp ES_LT    &kp ES_LBKT   &kp ES_LBRC  &kp ES_LPAR  &kp ES_IEXCL         &kp ES_EXCL   &kp ES_RPAR   &kp ES_RBRC   &kp ES_RBKT   &kp ES_GT     &none
                &none  &kp ES_NOT   &kp ES_TILDE  &kp ES_BSLH  &kp ES_PLUS  &kp ES_ASTRK         &kp ES_PRCNT  &kp ES_AT     &kp ES_SLASH  &kp ES_CARET  &kp ES_UNDER  &none
                                                                 &none  &trans  &kp SPACE        &kp RET  &kp DEL  &none
            >;
        };

        num_layer {
            label = "NUMBER";
            bindings = <
                &none  &hm F11 F1    &hm F12 F2    &kp F3        &kp F4        &kp F5             &kp F6       &kp F7        &kp F8      &kp F9       &kp F10      &none
                &none  &hm LGUI N1   &hm LCTRL N2  &hm LALT N3   &hm LSHFT N4  &kp N5             &kp N6       &hm RSHFT N7  &hm LALT N8 &hm RCTRL N9 &hm LGUI N0  &none
                &none  &kp ES_ASTRK  &kp ES_SLASH  &kp ES_MINUS  &kp ES_PLUS   &kp ES_LPAR        &kp ES_RPAR  &kp ES_EQUAL  &kp COMMA   &kp DOT      &kp ES_DEG   &none
                                                                   &none  &kp BKSP  &trans        &kp RET  &kp DEL  &none
            >;
        };

        media_layer {
            label = "MEDIA";
            bindings = <
                &none  &out OUT_TOG  &none         &none         &none         &bt BT_CLR          &none  &none         &kp C_STOP        &none         &none  &none
                &none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4        &none  &kp C_PREV    &kp C_PLAY_PAUSE  &kp C_NEXT    &none  &none
                &none  &none         &none         &none         &none         &none               &none  &kp C_VOL_DN  &kp C_MUTE        &kp C_VOL_UP  &none  &none
                                                                        &none  &none  &none        &trans  &none  &none
            >;
        };

        nav_layer {
            label = "NAVIG";
            bindings = <
                &none  &kp ESC   &kp TAB    &kp CAPS  &kp PSCRN  &none        &kp PG_UP  &none     &kp UARW   &none     &none  &none
                &none  &kp LGUI  &kp LCTRL  &kp LALT  &kp LSHFT  &none        &kp PG_DN  &kp LARW  &kp DARW   &kp RARW  &none  &none
                &none  &none     &none      &none     &none      &none        &none      &kp HOME  &kp PG_DN  &kp END   &none  &none
                                             &none  &kp ESC  &kp SPACE        &kp RET  &trans  &none
            >;
        };
    };
};